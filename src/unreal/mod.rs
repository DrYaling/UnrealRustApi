//! this is auto generated for unreal bindings by UnrealObject2RustBuilder
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(unused)]
#![allow(dead_code)]
/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type uint16 = u16;
pub type uint8 = u8;
pub type int32 = i32;
pub type uint32 = u32;
pub type f32_ = f32;
pub type f64_ = f64;

pub type string = &'static str;
pub use unreal_const::*;
///unreal_const  binder impl
mod unreal_const{
	use super::*;
	const UNREAL_VERSION: string = "1";
	const WORLD_LOOP_INTERVAL: int32 = 16;
}//end of unreal_const
pub use unreal::*;
///unreal  binder impl
mod unreal{
	use super::*;
	///rust api for unreal type FSphere
	pub struct Sphere{
		ptr: *mut std::ffi::c_void
	}
	pub type SphereIsInsideFPtr = unsafe extern "C" fn (this: *mut std::ffi::c_void, Other: *const std::ffi::c_void, Tolerance: f32) -> bool;
	static mut SphereIsInsideCallback: Option<SphereIsInsideFPtr> = None;
	/// not to lua
	#[no_mangle]
	unsafe extern "C" fn RegisterSphereIsInside(fun: SphereIsInsideFPtr){
		SphereIsInsideCallback = Some(fun);
	}
	impl Sphere{
		#[inline] pub fn get_ptr(&self) -> *const std::ffi::c_void { self.ptr as *const _ }
		#[inline] pub fn get_ptr_mut(&self) -> *mut std::ffi::c_void { self.ptr }
		 pub unsafe fn IsInside(&self, Other: &Sphere, Tolerance: f32) -> bool{
			SphereIsInsideCallback.as_ref().expect("FSphere::IsInside not registered!")(self.ptr, Other.get_ptr(), Tolerance)
		}
	}
}//end of unreal
///rust api for unreal type FVector
pub struct Vector{
	pub X: f32,
	pub Y: f32,
	pub Z: f32,
}
impl Vector{
}